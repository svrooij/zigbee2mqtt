export = BridgeLegacy;
declare class BridgeLegacy extends Extension {
    constructor(zigbee: any, mqtt: any, state: any, publishEntityState: any, eventBus: any);
    permitJoin(topic: any, message: any): Promise<void>;
    lastSeen(topic: any, message: any): void;
    elapsed(topic: any, message: any): void;
    reset(topic: any, message: any): Promise<void>;
    logLevel(topic: any, message: any): void;
    devices(topic: any, message: any): Promise<void>;
    groups(topic: any, message: any): void;
    rename(topic: any, message: any): void;
    renameLast(topic: any, message: any): void;
    remove(topic: any, message: any): Promise<void>;
    forceRemove(topic: any, message: any): Promise<void>;
    ban(topic: any, message: any): Promise<void>;
    deviceOptions(topic: any, message: any): void;
    addGroup(topic: any, message: any): void;
    removeGroup(topic: any, message: any): void;
    whitelist(topic: any, message: any): void;
    touchlinkFactoryReset(): Promise<void>;
    lastJoinedDeviceName: any;
    supportedOptions: {
        permit_join: (topic: any, message: any) => Promise<void>;
        last_seen: (topic: any, message: any) => void;
        elapsed: (topic: any, message: any) => void;
        reset: (topic: any, message: any) => Promise<void>;
        log_level: (topic: any, message: any) => void;
        devices: (topic: any, message: any) => Promise<void>;
        groups: (topic: any, message: any) => void;
        'devices/get': (topic: any, message: any) => Promise<void>;
        rename: (topic: any, message: any) => void;
        rename_last: (topic: any, message: any) => void;
        remove: (topic: any, message: any) => Promise<void>;
        force_remove: (topic: any, message: any) => Promise<void>;
        ban: (topic: any, message: any) => Promise<void>;
        device_options: (topic: any, message: any) => void;
        add_group: (topic: any, message: any) => void;
        remove_group: (topic: any, message: any) => void;
        force_remove_group: (topic: any, message: any) => void;
        whitelist: (topic: any, message: any) => void;
        'touchlink/factory_reset': () => Promise<void>;
    };
    _renameInternal(from: any, to: any): void;
    removeForceRemoveOrBan(action: any, message: any): Promise<void>;
    onMQTTConnected(): Promise<void>;
    onMQTTMessage(topic: any, message: any): Promise<boolean>;
    publish(): Promise<void>;
    onZigbeeEvent(type: any, data: any, resolvedEntity: any): void;
}
import Extension = require("../extension");
